{"version":3,"file":null,"sources":["../../src/js/Utils.js","../../src/js/App.js","../../src/js/controls/Control.js","../../src/js/controls/CounterControl.js","../../src/js/controls/ScoresControl.js","../../src/js/controls/MistakesControl.js","../../src/js/controls/SoundControl.js","../../src/js/Color.js","../../src/js/controls/Star.js","../../src/js/controls/MenuScreen.js","../../src/js/controls/MenuScreenStart.js","../../src/js/controls/MenuScreenEnd.js","../../src/js/controls/StarsHolder.js","../../src/js/SoundEffects.js"],"sourcesContent":["/**\n * Returns a random integer between min (inclusive) and max (inclusive)\n * @param {Number} min\n * @param {Number} max\n * @returns {Number}\n */\nexport function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}","import ScoresControl from './controls/ScoresControl.js';\nimport MistakesControl from './controls/MistakesControl.js';\nimport SoundControl from './controls/SoundControl.js';\nimport Star from './controls/Star.js';\nimport MenuScreenStart from './controls/MenuScreenStart.js';\nimport MenuScreenEnd from './controls/MenuScreenEnd.js';\nimport StarsHolder from './controls/StarsHolder.js';\n\nimport sounds from './sounds.json';\nimport SoundEffects from './SoundEffects.js';\n\nconst BACKGROUND_STARS_NUMBER_FACTOR = 0.0004;\nconst HIDE_TIMEOUT = 800;\nconst NEW_STAR_EFFECT = 'newStar';\nconst WRONG_STAR_EFFECT = 'wrongStar';\n\nclass App {\n    constructor() {\n\n        this._mistakesControl = new MistakesControl(document.querySelector('.control_mistakes'));\n        this._scoresControl = new ScoresControl(document.querySelector('.control_scores'));\n        this._soundControl = new SoundControl(document.querySelector('.control_sound'));\n\n        this._soundEffects = new SoundEffects(sounds, (songName) => this._soundControl.updateSongName(songName));\n        this._soundControl.muteCallback = () => this._soundEffects.mute();\n\n        this._stars = [];\n        this._starsHolder = new StarsHolder(document.querySelector('.stars-holder'));\n        const starsNumber = document.body.clientWidth * document.body.clientHeight * BACKGROUND_STARS_NUMBER_FACTOR;\n\n        for (let i = 0; i <= starsNumber; i++) {\n            this._addStar();\n        }\n\n        this._menuScreenStart = new MenuScreenStart(document.querySelector('.menu__screen_start'));\n        this._menuScreenStart.startGameBtn.addEventListener('click', () => {\n            this._startGame();\n        });\n\n\n        this._menuScreenEnd = new MenuScreenEnd(document.querySelector('.menu__screen_end-game'));\n        this._menuScreenEnd.retryBtn.addEventListener('click', () => {\n            this._startGame();\n        });\n\n        if (this._menuScreenEnd.shareBtn) {\n            this._menuScreenEnd.shareBtn.addEventListener('click', () => {\n                if (window.plugins && window.plugins.socialsharing) {\n                    const options = {\n                        message: `I have counted ${this._scoresControl.value} stars in Count The Stars Game!`,\n                        subject: 'Count The Stars', // fi. for email\n                        url: 'http://mad-gooze.github.io/CountTheStarsGame/'\n                    };\n                    window.plugins.socialsharing.shareWithOptions(options);\n                }\n            });\n        }\n\n        this._soundControl.show();\n        this._menuScreenStart.show();\n    };\n\n    _addStar(clickable, soundEffect) {\n        const star = Star.generateRandom();\n        this._stars.push(star);\n        star.addToDOM(this._starsHolder.node);\n        setTimeout(star.show.bind(star), 100);\n        //star.show();\n\n        if (clickable) {\n            star.addEventListener('click', () => {\n                this._processStarClick(star)\n            });\n        }\n        if (soundEffect) {\n            this._soundEffects.playEffect(soundEffect);\n        }\n    }\n\n    _processStarClick(star) {\n        const index = this._stars.indexOf(star);\n        if (index == this._stars.length - 1) {\n            this._scoresControl.value++;\n            this._addStar(true, NEW_STAR_EFFECT);\n        } else {\n            this._mistakesControl.value--;\n            if (this._mistakesControl.value < 0) {\n                this._endGame();\n                this._soundEffects.playEffect(WRONG_STAR_EFFECT);\n            } else {\n                this._addStar(true, WRONG_STAR_EFFECT);\n            }\n        }\n\n    }\n\n    _endGame() {\n        this._starsHolder.hide();\n        this._mistakesControl.hide();\n        this._scoresControl.hide();\n\n        this._menuScreenEnd.show();\n        this._menuScreenEnd.score = this._scoresControl.value;\n    }\n\n    _startGame() {\n        this._menuScreenStart.hide();\n        this._menuScreenEnd.hide();\n        // remove drawn stars\n        for (let star of this._stars) {\n            star.hide();\n        }\n        setTimeout(() => {\n            for (let star of this._stars) {\n                star.remove();\n            }\n            this._stars = [];\n            this._addStar(true, NEW_STAR_EFFECT); // add first star\n        }, HIDE_TIMEOUT);\n\n        // re-init in-game UI\n        this._mistakesControl.dropValue();\n        this._scoresControl.dropValue();\n        this._mistakesControl.show();\n        this._scoresControl.show();\n        this._starsHolder.show();\n    }\n}\n\ndocument.addEventListener(\"deviceready\", onDeviceReady, false);\n\nwindow.onload = onDeviceReady;\n\n\nfunction onDeviceReady() {\n    if (!window.deviceready) {\n        window.deviceready = true;\n\n\n        new App();\n    }\n}","/**\n * Represents Game UI Control.\n */\nexport default class Control {\n    /**\n     * Initialize Control with specified HTML node.\n     * @param {HTMLElement} node\n     */\n    constructor(node) {\n        this._node = node;\n\n        this.addEventListener = this._node.addEventListener.bind(this._node); // expose node's addEventListener\n        this._hiddenClass = 'control_hidden';\n    }\n\n    /**\n     * Show control.\n     */\n    show() {\n        this._node.classList.remove(this._hiddenClass);\n    }\n\n    /**\n     * Hide control.\n     */\n    hide() {\n        this._node.classList.add(this._hiddenClass);\n    }\n\n    /**\n     * Add Control to specified parent.\n     * @param {HTMLElement} parent\n     */\n    addToDOM(parent) {\n        parent.appendChild(this._node);\n    }\n\n    /**\n     * Remove Control from DOM.\n     */\n    remove() {\n        this._node.remove();\n    }\n}","import Control from './Control.js'\n\n/**\n * Represents Control with a counter\n */\nexport default class CounterControl extends Control {\n    /**\n     * Initialize CounterControl with specified HTML node and default value\n     * @param {HTMLElement} node\n     * @param {Number} defaultVal\n     */\n    constructor(node, defaultVal) {\n        super(node);\n        this._defaultValue = defaultVal;\n    }\n\n    /**\n     * Get counter value\n     * @returns {Number}\n     */\n    get value() {\n        return this._value;\n    }\n\n    /**\n     * Set counter value\n     * @param {Number} val\n     */\n    set value(val) {\n        this._value = val;\n    }\n\n    /**\n     * Drop counter to default\n     */\n    dropValue() {\n        this.value = this._defaultValue;\n    }\n}","import CounterControl from './CounterControl.js'\n\n/**\n * Represents abstract Control with some counter\n */\nexport default class  extends CounterControl {\n    constructor(node) {\n        super(node, 0);\n        this._countNode = this._node.querySelector('.control__count');\n    }\n    get value() {\n        return super.value;\n    }\n    set value(val) {\n        super.value = val;\n        this._countNode.innerHTML = val;\n    }\n}\n","import CounterControl from './CounterControl.js'\n\nconst ALLOWED_MISTAKES = 3;\n\n/**\n * Control for displaying of how many mistakes left\n */\nexport default class MistakesControl extends CounterControl {\n    /**\n     * Initialize MistakesControl with specified HTML node\n     * @param {HTMLElement} node\n     */\n    constructor(node) {\n        super(node, ALLOWED_MISTAKES);\n        this._starIcons = [];\n\n        for (let i = 0; i < this._defaultValue; i++) {\n            const icon = document.createElement('div');\n            icon.classList.add('control__star-icon');\n            this._starIcons.push(icon);\n            this._node.appendChild(icon);\n        }\n    }\n\n    get value() {\n        return super.value;\n    }\n\n    set value(val) {\n        val = Math.min(this._defaultValue, val);\n\n        super.value = val;\n\n        // show star icons from 0 to counter - 1, hide the others\n        for (let i = 0; i < this.value; i++) {\n            this._starIcons[i].style.opacity = 1;\n        }\n        for (let i = Math.max(this.value, 0); i < this._defaultValue; i++) {\n            this._starIcons[i].style.opacity = 0;\n        }\n    }\n}","import Control from './Control.js'\n\n/**\n * Represents Sound Control\n */\nexport default class SoundControl extends Control {\n    constructor(node) {\n        super(node);\n\n        this.muteCallback = undefined;\n        this._songName = node.querySelector('.control__text_song-name');\n        this._muteBtn = node.querySelector('.control__btn');\n        this._muteBtn.addEventListener('click', () => {\n            this._muteBtn.classList.toggle('icon-volume-high');\n            this._muteBtn.classList.toggle('icon-volume-off');\n            this.muteCallback();\n        })\n    }\n\n    /**\n     * Update displaying song name.\n     * @param {String} name\n     */\n    updateSongName(name) {\n        this._songName.innerHTML = name;\n    }\n}","import {getRandomInt} from './Utils.js';\n\n/**\n * RGB Color.\n */\nexport default class Color {\n\n    /**\n     * Create Color\n     * @param {Number} r Red\n     * @param {Number} g Green\n     * @param {Number} b Blue\n     * @param {Number} a Alpha\n     */\n    constructor(r, g, b, a = 1) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n\n    toRGBString() {\n        return `rgb(${this.r}, ${this.g}, ${this.b})`;\n    }\n\n    toRGBAString() {\n        return `rgb(${this.r}, ${this.g}, ${this.b}, ${this.a})`;\n    }\n\n    /**\n     * Generates random Color\n     * @param {Number} minVal\n     * @param {Number} maxVal\n     * @param {Number} a\n     * @returns {Color}\n     */\n    static random(minVal = 0, maxVal = 255, a = 1) {\n        return new Color(\n            getRandomInt(minVal, maxVal),\n            getRandomInt(minVal, maxVal),\n            getRandomInt(minVal, maxVal),\n            a\n        );\n    }\n}","import Control from './Control.js'\nimport Color from '../Color.js'\nimport {getRandomInt} from '../Utils.js';\n\nconst MIN_COLOR = 180;\nconst MAX_COLOR = 255;\n\nconst MIN_SIZE = 8;\nconst MAX_SIZE = 15;\n\nconst BLINK_MIN = 1000;\nconst BLINK_MAX = BLINK_MIN * 100;\n\nexport default class Star extends Control {\n    /**\n     * Initialize Star with specified HTML node.\n     * @param {HTMLElement} node\n     * @param {boolean} blinking\n     */\n    constructor(node, blinking = false) {\n        super(node);\n\n        if (blinking) {\n            // enable \"blinking\"\n            let blinkTimeout = getRandomInt(BLINK_MIN, BLINK_MAX);\n            setTimeout(() => {\n                node.classList.remove('control_blinking');\n                node.classList.add('control_blinking');\n                blinkTimeout = getRandomInt(BLINK_MIN, BLINK_MAX);\n            }, blinkTimeout);\n        }\n    }\n\n    /**\n     * Generates Star object with randomized size, position and color.\n     * @returns {Star}\n     */\n    static generateRandom() {\n        const node = document.createElement('div');\n        node.classList.add('control_star');\n        node.classList.add('control_hidden');\n\n        // randomize size\n        const size = getRandomInt(MIN_SIZE, MAX_SIZE);\n        node.style.width = node.style.height = `${size}px`;\n\n        // randomize position\n        node.style.top = `${getRandomInt(0, 100)}%`;\n        node.style.left = `${getRandomInt(0, 100)}%`;\n\n        // randomize color\n        const colors = [\n            Color.random(MIN_COLOR, MAX_COLOR),\n            Color.random(MIN_COLOR, MAX_COLOR),\n            Color.random(MIN_COLOR, MAX_COLOR, 0.9)\n        ];\n        node.style.background = `radial-gradient(\n                ellipse at center, \n                ${colors[0].toRGBString()} 0%, \n                ${colors[1].toRGBString()} 50%, \n                ${colors[2].toRGBString()} 100%\n            )`;\n        node.style.boxShadow = `0 0 ${size * 3 / 2}px ${colors[2].toRGBAString()}`;\n\n        return new Star(node, true);\n    }\n\n    hide() {\n        super.hide();\n        this._node.classList.remove('control_blinking');\n    }\n}","import Control from './Control.js'\n\n/**\n * Represents screen of menu.\n */\nexport default class MenuScreen extends Control {\n    constructor(node) {\n        super(node);\n        this._hiddenClass = 'menu__screen_inactive';\n    }\n}","import MenuScreen from './MenuScreen.js';\n\n/**\n * Screen of game end menu.\n */\nexport default class MenuScreenStart extends MenuScreen {\n    constructor(node) {\n        super(node);\n        this.startGameBtn = this._node.querySelector('.menu__btn_start-game');\n    }\n}\n\n","import MenuScreen from './MenuScreen.js';\n\n/**\n * Screen of game end menu.\n */\nexport default class MenuScreenEnd extends MenuScreen {\n    constructor(node) {\n        super(node);\n        this.retryBtn = this._node.querySelector('.menu__btn_retry');\n        this.shareBtn = this._node.querySelector('.menu__btn_share');\n        this._textScore = this._node.querySelector('.menu__text_score');\n        this._textPlural = this._node.querySelector('.menu__text_plural');\n    }\n\n    set score(score) {\n        this._textScore.innerHTML = score;\n        if (score == 1) {\n            this._textPlural.style.display = 'none';\n        } else {\n            this._textPlural.style.display = 'inline';\n        }\n    }\n}\n\n","import Control from './Control.js'\n\n/**\n * Place where stars are displayed.\n */\nexport default class StarsHolder extends Control {\n    constructor(node) {\n        super(node);\n        this._hiddenClass = 'stars-holder_inactive';\n    }\n\n    get node() {\n        return this._node;\n    }\n}","import {getRandomInt} from './Utils.js';\n\nconst nop = () => {};\n\n/**\n * Plays various sound effects via HTML5 Audio or Phongap cordova-plugin-nativeaudio\n */\nexport default class SoundEffects {\n    constructor(sounds, nextTrackCallback) {\n        this._nextTrackCallback = nextTrackCallback;\n        this._sounds = sounds;\n        this._mute = false;\n\n        this._lastEffectNumbers = {}; // previously played effects\n\n        this._native = window.plugins && window.plugins.NativeAudio;\n\n        if (this._native) {\n\n            for (let effect in sounds.effects) {\n                for (let file in sounds.effects[effect]) {\n                    const url = this._sounds.path + sounds.effects[effect][file];\n                    window.plugins.NativeAudio.preloadSimple(url, url);\n                }\n            }\n\n            this._nativeMusicIds = [];\n            for (let track in sounds.music) {\n                const url = this._sounds.path + sounds.music[track].file;\n                window.plugins.NativeAudio.preloadComplex(url, url, 1, 1, 0, () => {\n                    this._nativeMusicIds.push(url);\n                    this._trackLoadCallback();\n                });\n\n            }\n        } else {\n            this._players = {}; // audio objects playing effects saved here\n            this._musicPlayer = new Audio();\n            this._musicPlayer.addEventListener('ended', () => this._nextTrack());\n            this._nextTrack();\n        }\n\n        this._prevTrackNumber = -1;\n    }\n\n\n    _trackLoadCallback() {\n        if (this._nativeMusicIds.length === this._sounds.music.length) {\n            this._nextTrack();\n        }\n    }\n\n    _randomTrackNumber() {\n        return getRandomInt(0, this._sounds.music.length - 1);\n    }\n\n    _nextTrack() {\n        let nextTrackNumber;\n        do {\n            nextTrackNumber = this._randomTrackNumber();\n        } while (nextTrackNumber === this._prevTrackNumber); // get random track (different from previous)\n\n        const url = this._sounds.path + this._sounds.music[nextTrackNumber].file;\n        this._prevTrackNumber = nextTrackNumber;\n\n        if (this._native) {\n            window.plugins.NativeAudio.play(url, nop, nop, () => {this._nextTrack()});\n        } else {\n            this._musicPlayer.src = url;\n            this._musicPlayer.play();\n        }\n\n        this._nextTrackCallback(this._sounds.music[nextTrackNumber].name);\n    }\n\n\n    _playSound(url) {\n        if (!this._mute) {\n            if (this._native) {\n                window.plugins.NativeAudio.play(this._sounds.path + url);\n            } else {\n                const id = Date.now();\n                this._players[id] = new Audio();\n                this._players[id].src = this._sounds.path + url;\n                this._players[id].addEventListener('ended', () => delete this._players[id]);\n                this._players[id].play();\n            }\n        }\n    }\n\n\n    playEffect(effectName) {\n        // sounds of the effects are cycled\n        let effectNumber = this._lastEffectNumbers[effectName]; // get previously played sound number for this effect\n        if (!Number.isInteger(effectNumber)) {\n            effectNumber = -1;\n        }\n\n        effectNumber = (effectNumber + 1) % this._sounds.effects[effectName].length; // get next sound number\n        this._playSound(this._sounds.effects[effectName][effectNumber]);\n        this._lastEffectNumbers[effectName] = effectNumber;\n    }\n\n    mute() {\n        this._mute = !this._mute;\n        if (this._native) {\n            for (let id of this._nativeMusicIds) {\n                window.plugins.NativeAudio.setVolumeForComplexAsset(id, this._mute ? 0 : 1);\n            }\n        } else {\n            this._musicPlayer.muted = this._mute;\n            for (let playerId in this._players) {\n                this._players[playerId].muted = this._mute;\n            }\n        }\n    }\n}"],"names":["getRandomInt","min","max","Math","floor","random","onDeviceReady","window","deviceready","App","Control","node","_node","addEventListener","this","bind","_hiddenClass","classList","remove","add","parent","appendChild","CounterControl","defaultVal","_defaultValue","value","_value","val","_countNode","_this","querySelector","innerHTML","ALLOWED_MISTAKES","MistakesControl","_starIcons","i","icon","document","createElement","push","style","opacity","_i","SoundControl","muteCallback","undefined","_songName","_muteBtn","toggle","name","Color","r","g","b","a","minVal","maxVal","MIN_COLOR","MAX_COLOR","MIN_SIZE","MAX_SIZE","BLINK_MIN","BLINK_MAX","Star","blinking","blinkTimeout","size","width","height","top","left","colors","background","toRGBString","boxShadow","toRGBAString","MenuScreen","MenuScreenStart","startGameBtn","MenuScreenEnd","retryBtn","shareBtn","_textScore","_textPlural","score","display","StarsHolder","nop","SoundEffects","sounds","nextTrackCallback","_nextTrackCallback","_sounds","_mute","_lastEffectNumbers","_native","plugins","NativeAudio","effect","effects","file","url","path","preloadSimple","_nativeMusicIds","track","music","preloadComplex","_trackLoadCallback","_players","_musicPlayer","Audio","_nextTrack","_prevTrackNumber","length","nextTrackNumber","_randomTrackNumber","play","src","id","Date","now","_this3","effectName","effectNumber","Number","isInteger","_playSound","setVolumeForComplexAsset","muted","playerId","BACKGROUND_STARS_NUMBER_FACTOR","HIDE_TIMEOUT","NEW_STAR_EFFECT","WRONG_STAR_EFFECT","_mistakesControl","_scoresControl","ScoresControl","_soundControl","_soundEffects","songName","updateSongName","mute","_stars","_starsHolder","starsNumber","body","clientWidth","clientHeight","_addStar","_menuScreenStart","_startGame","_menuScreenEnd","socialsharing","options","shareWithOptions","show","clickable","soundEffect","star","generateRandom","addToDOM","_processStarClick","playEffect","index","indexOf","_endGame","hide","dropValue","onload"],"mappings":"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"}